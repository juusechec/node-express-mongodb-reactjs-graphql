{"version":3,"sources":["App.js","serviceWorker.js","components/Edit.js","components/Create.js","components/Show.js","components/List.js","config.js","components/biosearch/Biosearch.js","components/oportunities/Oportunities.js","index.js"],"names":["GET_BOOKS","gql","_templateObject","App","react_default","a","createElement","react_apollo_esm","pollInterval","query","_ref","loading","error","data","concat","message","className","react_router_dom","to","books","map","book","index","key","_id","title","author","Component","Boolean","window","location","hostname","match","GET_SAVED_OPPORTUNITY","Edit_templateObject","UPDATE_SAVED_OPPORTUNITY","_templateObject2","Edit","id_user","id_opportunity","comment","_this","this","variables","savedOpportunityId","props","params","id","mutation","savedOpportunity","onCompleted","history","push","updateBook","_ref2","onSubmit","e","preventDefault","value","htmlFor","type","name","ref","node","placeholder","defaultValue","ADD_BOOK","Create_templateObject","Create","isbn","description","published_year","publisher","addBook","parseInt","cols","rows","Show_templateObject","DELETE_SAVED_OPPORTUNITY","Show_templateObject2","Show","removeSavedOpportunity","GET_SAVED_OPPORTUNITIES","List_templateObject","List","savedOpportunities","config","graphqlEndpoint","bioEndpoint","postEndpoint","Biosearch","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","bio","handleChange","bind","assertThisInitialized","handleSubmit","username","_this2","apiUrl","fetch","then","response","json","console","log","person","sessionStorage","setItem","JSON","stringify","setState","event","getBioData","target","summaryOfBio","onChange","ADD_SAVED_OPPORTUNITY","Oportunities_templateObject","Oportunities","oportunities","criteria","userId","parse","getItem","publicId","getKeywords","keywords","getOpportunities","body","word_qty","Promise","resolve","reject","method","headers","Content-Type","catch","reason","length","word","parsed_value","skill/role","text","experience","or","results","_this3","addSavedOpportunity","opportunity","href","rel","objective","onClick","alert","crit","client","ApolloClient","uri","ReactDOM","render","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36b0352f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst GET_BOOKS = gql`\n  {\n    books {\n      _id\n      title\n      author\n    }\n  }\n`;\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Query pollInterval={500} query={GET_BOOKS}>\n        {({ loading, error, data }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n    \n          return (\n            <div className=\"container\">\n              <div className=\"panel panel-default\">\n                <div className=\"panel-heading\">\n                  <h3 className=\"panel-title\">\n                    LIST OF BOOKS\n                  </h3>\n                  <h4><Link to=\"/create\">Add Book</Link></h4>\n                </div>\n                <div className=\"panel-body\">\n                  <table className=\"table table-stripe\">\n                    <thead>\n                      <tr>\n                        <th>Title</th>\n                        <th>Author</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {data.books.map((book, index) => (\n                        <tr key={index}>\n                          <td><Link to={`/show/${book._id}`}>{book.title}</Link></td>\n                          <td>{book.author}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\n\nconst GET_SAVED_OPPORTUNITY = gql`\n  query savedOpportunity($savedOpportunityId: String) {\n    savedOpportunity(id: $savedOpportunityId) {\n      _id\n      id_user\n      id_opportunity\n      comment\n    }\n  }\n`;\n\nconst UPDATE_SAVED_OPPORTUNITY = gql`\n  mutation updateSavedOpportunity(\n    $id: String!\n    $id_user: String!\n    $id_opportunity: String!\n    $comment: String!\n  ) {\n    updateSavedOpportunity(\n      id: $id\n      id_user: $id_user\n      id_opportunity: $id_opportunity\n      comment: $comment\n    ) {\n      updated_date\n    }\n  }\n`;\n\nclass Edit extends Component {\n  render() {\n    let id_user, id_opportunity, comment;\n    return (\n      <Query\n        query={GET_SAVED_OPPORTUNITY}\n        variables={{ savedOpportunityId: this.props.match.params.id }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return \"Loading...\";\n          if (error) return `Error! ${error.message}`;\n\n          return (\n            <Mutation\n              mutation={UPDATE_SAVED_OPPORTUNITY}\n              key={data.savedOpportunity._id}\n              onCompleted={() => this.props.history.push(`/list`)}\n            >\n              {(updateBook, { loading, error }) => (\n                <div className=\"container\">\n                  <div className=\"panel panel-default\">\n                    <div className=\"panel-heading\">\n                      <h3 className=\"panel-title\">EDIT SAVED OPPORTUNITY</h3>\n                    </div>\n                    <div className=\"panel-body\">\n                      <h4>\n                        <Link to=\"/list\" className=\"btn btn-primary\">\n                          Saved Opportunities List\n                        </Link>\n                      </h4>\n                      <form\n                        onSubmit={(e) => {\n                          e.preventDefault();\n                          updateBook({\n                            variables: {\n                              id: data.savedOpportunity._id,\n                              id_user: id_user.value,\n                              id_opportunity: id_opportunity.value,\n                              comment: comment.value,\n                            },\n                          });\n                          id_user.value = \"\";\n                          id_opportunity.value = \"\";\n                          comment.value = \"\";\n                        }}\n                      >\n                        <div className=\"form-group\">\n                          <label htmlFor=\"id_user\">ID USER:</label>\n                          <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"id_user\"\n                            ref={(node) => {\n                              id_user = node;\n                            }}\n                            placeholder=\"ID_USER\"\n                            defaultValue={data.savedOpportunity.id_user}\n                          />\n                        </div>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"title\">ID Opportunity:</label>\n                          <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"id_opportunity\"\n                            ref={(node) => {\n                              id_opportunity = node;\n                            }}\n                            placeholder=\"ID_OPPORTUNITY\"\n                            defaultValue={data.savedOpportunity.id_opportunity}\n                          />\n                        </div>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"comment\">Comment:</label>\n                          <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            name=\"comment\"\n                            ref={(node) => {\n                              comment = node;\n                            }}\n                            placeholder=\"Author\"\n                            defaultValue={data.savedOpportunity.comment}\n                          />\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-success\">\n                          Submit\n                        </button>\n                      </form>\n                      {loading && <p>Loading...</p>}\n                      {error && <p>Error :( Please try again</p>}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Mutation>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default Edit;\n","import React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport { Link } from 'react-router-dom';\n\nconst ADD_BOOK = gql`\n    mutation AddBook(\n        $isbn: String!,\n        $title: String!,\n        $author: String!,\n        $description: String!,\n        $publisher: String!,\n        $published_year: Int!) {\n        addBook(\n            isbn: $isbn,\n            title: $title,\n            author: $author,\n            description: $description,\n            publisher: $publisher,\n            published_year: $published_year) {\n            _id\n        }\n    }\n`;\n\nclass Create extends Component {\n  \n    render() {\n      let isbn, title, author, description, published_year, publisher;\n      return (\n        <Mutation mutation={ADD_BOOK} onCompleted={() => this.props.history.push('/')}>\n            {(addBook, { loading, error }) => (\n                <div className=\"container\">\n                    <div className=\"panel panel-default\">\n                        <div className=\"panel-heading\">\n                            <h3 className=\"panel-title\">\n                                ADD BOOK\n                            </h3>\n                        </div>\n                        <div className=\"panel-body\">\n                            <h4><Link to=\"/\" className=\"btn btn-primary\">Book List</Link></h4>\n                            <form onSubmit={e => {\n                                e.preventDefault();\n                                addBook({ variables: { isbn: isbn.value, title: title.value, author: author.value, description: description.value, publisher: publisher.value, published_year: parseInt(published_year.value) } });\n                                isbn.value = \"\";\n                                title.value = \"\";\n                                author.value = \"\";\n                                description.value = \"\";\n                                publisher.value = null;\n                                published_year.value = \"\";\n                            }}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"isbn\">ISBN:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"isbn\" ref={node => {\n                                        isbn = node;\n                                    }} placeholder=\"ISBN\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"title\">Title:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"title\" ref={node => {\n                                        title = node;\n                                    }} placeholder=\"Title\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Author:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"author\" ref={node => {\n                                        author = node;\n                                    }} placeholder=\"Author\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"description\">Description:</label>\n                                    <textarea className=\"form-control\" name=\"description\" ref={node => {\n                                        description = node;\n                                    }} placeholder=\"Description\" cols=\"80\" rows=\"3\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Publisher:</label>\n                                    <input type=\"text\" className=\"form-control\" name=\"publisher\" ref={node => {\n                                        publisher = node;\n                                    }} placeholder=\"Publisher\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"author\">Published Year:</label>\n                                    <input type=\"number\" className=\"form-control\" name=\"published_year\" ref={node => {\n                                        published_year = node;\n                                    }} placeholder=\"Published Year\" />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-success\">Submit</button>\n                            </form>\n                            {loading && <p>Loading...</p>}\n                            {error && <p>Error :( Please try again</p>}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </Mutation>\n      );\n    }\n  }\n  \n  export default Create;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\nimport gql from \"graphql-tag\";\nimport { Query, Mutation } from \"react-apollo\";\n\nconst GET_SAVED_OPPORTUNITY = gql`\n  query savedOpportunity($savedOpportunityId: String) {\n    savedOpportunity(id: $savedOpportunityId) {\n      _id\n      id_user\n      id_opportunity\n      comment\n    }\n  }\n`;\n\nconst DELETE_SAVED_OPPORTUNITY = gql`\n  mutation removeSavedOpportunity($id: String!) {\n    removeSavedOpportunity(id: $id) {\n      _id\n    }\n  }\n`;\n\nclass Show extends Component {\n  render() {\n    return (\n      <Query\n        pollInterval={500}\n        query={GET_SAVED_OPPORTUNITY}\n        variables={{ savedOpportunityId: this.props.match.params.id }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return \"Loading...\";\n          if (error) return `Error! ${error.message}`;\n\n          return (\n            <div className=\"container\">\n              <div className=\"panel panel-default\">\n                <div className=\"panel-heading\">\n                  <h4>\n                    <Link to=\"/\">Saved Opportunities List</Link>\n                  </h4>\n                  <h3 className=\"panel-title\">{data.savedOpportunity.title}</h3>\n                </div>\n                <div className=\"panel-body\">\n                  <dl>\n                    <dt>ID User:</dt>\n                    <dd>{data.savedOpportunity.id_user}</dd>\n                    <dt>ID Opportunity:</dt>\n                    <dd>{data.savedOpportunity.id_opportunity}</dd>\n                    <dt>Comentario:</dt>\n                    <dd>{data.savedOpportunity.comment}</dd>\n                  </dl>\n                  <Mutation\n                    mutation={DELETE_SAVED_OPPORTUNITY}\n                    key={data.savedOpportunity._id}\n                    onCompleted={() => this.props.history.push(\"/list\")}\n                  >\n                    {(removeSavedOpportunity, { loading, error }) => (\n                      <div>\n                        <form\n                          onSubmit={(e) => {\n                            e.preventDefault();\n                            removeSavedOpportunity({ variables: { id: data.savedOpportunity._id } });\n                          }}\n                        >\n                          <Link\n                            to={`/edit/${data.savedOpportunity._id}`}\n                            className=\"btn btn-success\"\n                          >\n                            Edit\n                          </Link>\n                          &nbsp;\n                          <button type=\"submit\" className=\"btn btn-danger\">\n                            Delete\n                          </button>\n                        </form>\n                        {loading && <p>Loading...</p>}\n                        {error && <p>Error :( Please try again</p>}\n                      </div>\n                    )}\n                  </Mutation>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default Show;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './List.css';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nconst GET_SAVED_OPPORTUNITIES = gql`\n  {\n    savedOpportunities {\n      _id\n      id_user\n      id_opportunity\n      comment\n    }\n  }\n`;\n\nclass List extends Component {\n\n  render() {\n    return (\n      <Query pollInterval={500} query={GET_SAVED_OPPORTUNITIES}>\n        {({ loading, error, data }) => {\n          if (loading) return 'Loading...';\n          if (error) return `Error! ${error.message}`;\n    \n          return (\n            <div className=\"container\">\n              <div className=\"panel panel-default\">\n                <div className=\"panel-heading\">\n                  <h3 className=\"panel-title\">\n                    Saved Opportunities\n                  </h3>\n                  {/* <h4><Link to=\"/create\">Add</Link></h4> */}\n                </div>\n                <div className=\"panel-body\">\n                  <table className=\"table table-stripe\">\n                    <thead>\n                      <tr>\n                        <th></th>\n                        <th>User ID</th>\n                        <th>Opportunity ID</th>\n                        <th>Comment</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {data.savedOpportunities.map((savedOpportunity, index) => (\n                        <tr key={index}>\n                          <td><Link to={`/show/${savedOpportunity._id}`}>See</Link></td>\n                          <td>{savedOpportunity.id_user}</td>\n                          <td>{savedOpportunity.id_opportunity}</td>\n                          <td>{savedOpportunity.comment}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default List;\n","const config = {\n  graphqlEndpoint: 'http://localhost:3001/graphql',\n  bioEndpoint: 'http://localhost:3001/bio',\n  postEndpoint: 'http://localhost:3001/proxy/post',\n};\nexport default config;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport config from \"../../config\";\nimport \"./Biosearch.css\";\n\nclass Biosearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      bio: {},\n      value: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  getBioData(username) {\n    const apiUrl = `${config.bioEndpoint}?username=${username}`;\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"BIO DATA\", data);\n        if (!data.person) {\n          this.setState({\n            error: \"That bio isn't exists!\",\n            isLoaded: false,\n          });\n        } else {\n          sessionStorage.setItem(\"bio\", JSON.stringify(data));\n          this.setState({\n            isLoaded: true,\n            bio: data,\n            error: null,\n          });\n        }\n      });\n  }\n\n  handleSubmit(event) {\n    console.log(\"A name was submitted: \" + this.state.value);\n    event.preventDefault();\n    this.getBioData(this.state.value);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (\n        <div className=\"container\">\n          <div className=\"panel panel-default\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">What's your bio?</h3>\n            </div>\n            <div className=\"panel-body\">\n              {this.state.error && (\n                <label>\n                  <div>Error: {this.state.error}</div>\n                </label>\n              )}\n              <form onSubmit={this.handleSubmit}>\n                <label>\n                  BioId:\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                  />\n                </label>\n                <input type=\"submit\" value=\"Search\" className=\"btn btn-success\" />\n              </form>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"container\">\n          <div className=\"panel panel-default\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">That's your bio</h3>\n              <h4>Bio</h4>\n            </div>\n            <div className=\"panel-body\">\n              <ul>\n                <li>Fullname: {this.state.bio.person.name}</li>\n                <li>Summary: {this.state.bio.person.summaryOfBio}</li>\n              </ul>\n              <Link\n                to={`/opportunities/${this.state.value}`}\n                className=\"btn btn-success\"\n              >\n                See job opportunities!\n              </Link>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Biosearch;\n","import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport config from \"../../config\";\nimport \"./Oportunities.css\";\nimport { Link } from \"react-router-dom\";\n\nconst ADD_SAVED_OPPORTUNITY = gql`\n  mutation AddSavedOpportunity(\n    $id_user: String!\n    $id_opportunity: String!\n    $comment: String!\n  ) {\n    addSavedOpportunity(\n      id_user: $id_user\n      id_opportunity: $id_opportunity\n      comment: $comment\n    ) {\n      _id\n    }\n  }\n`;\n\nclass Oportunities extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      oportunities: [],\n      criteria: [],\n      value: \"\",\n      userId: \"\",\n    };\n  }\n\n  async componentDidMount() {\n    // console.log(\"styles\", styles);\n    const bio = JSON.parse(sessionStorage.getItem(\"bio\"));\n    this.setState({\n      userId: bio.person.publicId\n    });\n    const summaryOfBio = bio.person.summaryOfBio;\n    const keywords = await this.getKeywords(summaryOfBio);\n    console.log(\"keywords\", keywords);\n    this.getOpportunities(keywords.keywords);\n  }\n\n  getKeywords(summaryOfBio) {\n    const url = \"http://localhost:3001/extract\";\n    const body = {\n      data: summaryOfBio,\n      word_qty: 10,\n    };\n    return new Promise((resolve, reject) => {\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          resolve(data);\n        })\n        .catch((reason) => {\n          reject(reason);\n        });\n    });\n  }\n\n  getOpportunities(keywords) {\n    const apiUrl = `${config.postEndpoint}/opportunities/_search/?currency=USD%24&page=0&periodicity=hourly&lang=en&size=20&aggregate=false&offset=0`;\n    const criteria = [];\n    for (let index = 0; index < keywords.length; index++) {\n      const word = keywords[index].parsed_value;\n      criteria.push({\n        \"skill/role\": {\n          text: word,\n          experience: \"potential-to-develop\",\n        },\n      });\n    }\n    console.log(\"criteria\", criteria);\n    const body = {\n      or: criteria,\n    };\n    console.log(\"getOpportunities api url\", apiUrl);\n    fetch(apiUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"OPPORTUNITIES DATA\", data);\n        if (!data.results) {\n          this.setState({\n            error: \"That link isn't exists!\",\n            isLoaded: false,\n          });\n        } else {\n          this.setState({\n            isLoaded: true,\n            oportunities: data.results,\n            criteria: criteria,\n            error: null,\n          });\n        }\n      });\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return (\n        <div className=\"container\">\n          <div className=\"panel panel-default\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">Cargando...</h3>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <Mutation\n          mutation={ADD_SAVED_OPPORTUNITY}\n          onCompleted={() => {\n            console.log(\"OK!!!!!!\");\n            // this.props.history.push(\"/\")\n          }}\n        >\n          {(addSavedOpportunity, { loading, error }) => (\n            <div className=\"container\">\n              <div className=\"panel panel-default\">\n                <div className=\"panel-heading\">\n                  <h3 className=\"panel-title\">That's your work selection</h3>\n                  <h4>Opportunities</h4>\n                </div>\n                <div className=\"panel-body\">\n                  <ul>\n                    {this.state.oportunities.map((opportunity, index) => (\n                      <div key={`opportunity${index}`}>\n                        <a\n                          href={`https://torre.co/jobs/${opportunity.id}`}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text\"\n                        >\n                          <li>{opportunity.objective}</li>\n                        </a>\n                        <div\n                          className=\"star\"\n                          onClick={() => {\n                            addSavedOpportunity({\n                              variables: {\n                                id_user: this.state.userId,\n                                id_opportunity: opportunity.id,\n                                comment: opportunity.objective,\n                              },\n                            });\n                            alert(\"Saved opportunity!\");\n                          }}\n                        ></div>\n                      </div>\n                    ))}\n                  </ul>\n                  <br />\n                  <h4>Some keywords detected for you bio</h4>\n                  <ul>\n                    {this.state.criteria.map((crit, index) => (\n                      <li key={`criteria${index}`}>\n                        {crit[\"skill/role\"].text}\n                      </li>\n                    ))}\n                  </ul>\n                  <Link\n                    to=\"/list\"\n                    className=\"btn btn-success\"\n                  >\n                    See saved opportunities\n                  </Link>\n                </div>\n              </div>\n            </div>\n          )}\n        </Mutation>\n      );\n    }\n  }\n}\n\nexport default Oportunities;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Edit from './components/Edit';\nimport Create from './components/Create';\nimport Show from './components/Show';\nimport List from './components/List';\nimport Biosearch from './components/biosearch/Biosearch';\nimport config from './config';\nimport Oportunities from './components/oportunities/Oportunities';\n\nconst client = new ApolloClient({ uri: config.graphqlEndpoint });\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <Router>\n            <div>\n                <Route exact path='/' component={Biosearch} />\n                <Route path='/list' component={List} />\n                <Route path='/app' component={App} />\n                <Route path='/edit/:id' component={Edit} />\n                <Route path='/create' component={Create} />\n                <Route path='/show/:id' component={Show} />\n                <Route path='/opportunities/:id' component={Oportunities} />\n            </div>\n        </Router>\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}